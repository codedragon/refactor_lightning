There is a great organization called software carpentry that goes to Universities and teaches researchers the basics of software development. They like to have instructors that have fairly recently learned the material, because these instructors are more likely to remember the stumbling blocks of beginner learners. This was brought home to me recently, as I was trying to explain how to refactor code to a beginner. The problem is not actually different for the expert: when faced with the unknown, we all play around with code, trying to see what works. And often this playing means that in the end have something that works, but is pretty messy. Maybe the ordering makes no sense, there are too many lines in an if statement, too many conditionals, etc. Code smells everywhere. And, for those of us who have been coding for a while, we can often stare at the code for a few minutes, and then say - pull that code out, move this code here, get rid of this entirely, etc. And when we tell this to the new programmers, they just look at us like we are from another planet. They just don’t see how we figured that out; can’t see what is going on in our heads. So, I started to think about how to break down the process so that it is manageable. So that students can kind of see what is going on in our heads. So, I came up with this, which may or may not be original, but would love to hear feedback about it.
